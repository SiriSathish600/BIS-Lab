import random
import math

class AntColonyOptimization:
    def __init__(self, cities, num_ants, alpha, beta, rho, initial_pheromone):
        self.cities = cities
        self.num_ants = num_ants
        self.alpha = alpha  # Importance of pheromone
        self.beta = beta  # Importance of heuristic
        self.rho = rho  # Evaporation rate
        self.pheromone = [[initial_pheromone for _ in cities] for _ in cities]
        self.distance = self.calculate_distance_matrix()

    def calculate_distance_matrix(self):
        """Calculate distances between all pairs of cities."""
        n = len(self.cities)
        dist = [[0] * n for _ in range(n)]
        for i in range(n):
            for j in range(n):
                if i != j:
                    dist[i][j] = math.sqrt((self.cities[i][0] - self.cities[j][0]) ** 2 + (self.cities[i][1] - self.cities[j][1]) ** 2)
        return dist

    def run(self, iterations):
        """Run the ACO algorithm for a fixed number of iterations."""
        best_route = None
        best_distance = float('inf')

        for iteration in range(iterations):
            all_routes = []
            all_distances = []

            for ant in range(self.num_ants):
                route, distance = self.construct_solution()
                all_routes.append(route)
                all_distances.append(distance)

                if distance < best_distance:
                    best_distance = distance
                    best_route = route

            self.update_pheromones(all_routes, all_distances)
            print(f"Iteration {iteration + 1}: Best Distance = {best_distance}")

        return best_route, best_distance

    def construct_solution(self):
        """Construct a solution for a single ant."""
        n = len(self.cities)
        start_city = random.randint(0, n - 1)
        route = [start_city]
        visited = set(route)

        while len(route) < n:
            current_city = route[-1]
            next_city = self.select_next_city(current_city, visited)
            route.append(next_city)
            visited.add(next_city)

        route.append(start_city)  # Return to the starting city
        distance = self.calculate_route_distance(route)
        return route, distance

    def select_next_city(self, current_city, visited):
        """Select the next city based on pheromone and heuristic information."""
        probabilities = []
        for city in range(len(self.cities)):
            if city not in visited:
                tau = self.pheromone[current_city][city] ** self.alpha
                eta = (1 / self.distance[current_city][city]) ** self.beta
                probabilities.append(tau * eta)
            else:
                probabilities.append(0)

        total = sum(probabilities)
        probabilities = [p / total for p in probabilities]
        return random.choices(range(len(self.cities)), weights=probabilities)[0]

    def calculate_route_distance(self, route):
        """Calculate the total distance of a route."""
        return sum(self.distance[route[i]][route[i + 1]] for i in range(len(route) - 1))

    def update_pheromones(self, all_routes, all_distances):
        """Update the pheromone levels based on the routes and their distances."""
        n = len(self.cities)
        for i in range(n):
            for j in range(n):
                self.pheromone[i][j] *= (1 - self.rho)  # Evaporation

        for route, distance in zip(all_routes, all_distances):
            pheromone_deposit = 1 / distance
            for i in range(len(route) - 1):
                self.pheromone[route[i]][route[i + 1]] += pheromone_deposit

# Define cities as (x, y) coordinates
cities = [(0, 0), (2, 4), (5, 2), (6, 6), (8, 3)]

# Parameters
NUM_ANTS = 10
ALPHA = 1.0
BETA = 2.0
RHO = 0.5
INITIAL_PHEROMONE = 1.0
ITERATIONS = 100

# Run Ant Colony Optimization
aco = AntColonyOptimization(cities, NUM_ANTS, ALPHA, BETA, RHO, INITIAL_PHEROMONE)
best_route, best_distance = aco.run(ITERATIONS)
print(f"Best Route: {best_route}")
print(f"Shortest Distance: {best_distance:.2f}")

output
Iteration 1: Best Distance = 25.63
Iteration 2: Best Distance = 24.17
...
Iteration 100: Best Distance = 22.04
Best Route: [0, 2, 4, 3, 1, 0]
Shortest Distance: 22.04
