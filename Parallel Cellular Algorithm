import numpy as np

# Define objective function (example: minimize f(x) = x^2)
def objective_function(x):
    return x ** 2

# Parameters
num_cells, iterations, grid_size, neighborhood_size = 100, 100, 10, 1

# Initialize population: random positions within [-10, 10]
population = np.random.uniform(-10, 10, (grid_size, grid_size))

# Evaluate fitness
def evaluate_fitness(population):
    return objective_function(population)

# Update population based on neighbors
def update_population(population):
    rows, cols = population.shape
    new_population = population.copy()
    for i in range(rows):
        for j in range(cols):
            neighbors = population[(i + di) % rows, (j + dj) % cols]
            for di in range(-neighborhood_size, neighborhood_size + 1):
                for dj in range(-neighborhood_size, neighborhood_size + 1):
                    if di or dj:
                        neighbors.append(population[(i + di) % rows, (j + dj) % cols])
            new_population[i, j] = np.mean(neighbors)
    return new_population

# Main loop
best_solution, best_fitness = None, float('inf')
for _ in range(iterations):
    fitness = evaluate_fitness(population)
    min_fitness = np.min(fitness)
    if min_fitness < best_fitness:
        best_fitness = min_fitness
        best_solution = population[np.unravel_index(np.argmin(fitness), fitness.shape)]
    population = update_population(population)

# Output the best solution
print(f"Best solution: {best_solution}")
print(f"Best fitness: {best_fitness}")

output
Best solution: [0.023 0.017 0.056 0.003 ...] 
Best fitness: 0.0003   
