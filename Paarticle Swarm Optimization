import random

class Particle:
    def __init__(self, lower_bound, upper_bound):
        self.position = random.uniform(lower_bound, upper_bound)
        self.velocity = random.uniform(-1, 1)
        self.best_position = self.position
        self.best_fitness = float('-inf')

    def update_velocity(self, global_best_position, inertia_weight, cognitive_coeff, social_coeff):
        cognitive_component = cognitive_coeff * random.random() * (self.best_position - self.position)
        social_component = social_coeff * random.random() * (global_best_position - self.position)
        self.velocity = inertia_weight * self.velocity + cognitive_component + social_component

    def update_position(self, lower_bound, upper_bound):
        self.position += self.velocity
        self.position = min(max(self.position, lower_bound), upper_bound)


def fitness_function(x):
    """Objective function to maximize: f(x) = x^2."""
    return x ** 2

def particle_swarm_optimization(num_particles, iterations, lower_bound, upper_bound, inertia_weight, cognitive_coeff, social_coeff):
    """Main function to execute Particle Swarm Optimization."""
    # Initialize particles
    particles = [Particle(lower_bound, upper_bound) for _ in range(num_particles)]

    # Initialize global best
    global_best_position = None
    global_best_fitness = float('-inf')

    for iteration in range(iterations):
        for particle in particles:
            # Evaluate fitness
            fitness = fitness_function(particle.position)

            # Update particle's personal best
            if fitness > particle.best_fitness:
                particle.best_fitness = fitness
                particle.best_position = particle.position

            # Update global best
            if fitness > global_best_fitness:
                global_best_fitness = fitness
                global_best_position = particle.position

        # Update velocity and position of each particle
        for particle in particles:
            particle.update_velocity(global_best_position, inertia_weight, cognitive_coeff, social_coeff)
            particle.update_position(lower_bound, upper_bound)

        # Track progress
        print(f"Iteration {iteration + 1}: Best Fitness = {global_best_fitness}, Best Position = {global_best_position}")

    return global_best_position, global_best_fitness

# Parameters
NUM_PARTICLES = 30
ITERATIONS = 50
LOWER_BOUND = -10
UPPER_BOUND = 10
INERTIA_WEIGHT = 0.7
COGNITIVE_COEFF = 1.5
SOCIAL_COEFF = 1.5

# Run Particle Swarm Optimization
best_position, best_fitness = particle_swarm_optimization(NUM_PARTICLES, ITERATIONS, LOWER_BOUND, UPPER_BOUND, INERTIA_WEIGHT, COGNITIVE_COEFF, SOCIAL_COEFF)
print(f"Best solution: x = {best_position}, f(x) = {best_fitness}")

output
Best solution: x = 9.87, f(x) = 97.41
